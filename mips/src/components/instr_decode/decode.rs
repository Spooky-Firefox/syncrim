// instruction encoding

#[derive(Debug)]
pub enum Instr {
    RType(Op, Rs, Rt, Rd, Sa, Function),
    IType(Op, Rs, Rt, Imm16),
    JType(Op, Imm26),
}

#[rustfmt::skip]
#[derive(Debug)]
pub enum Op {
    Funct   = 0,
    Rt      = 1,
    J       = 2,
    Jal     = 3,
    Beq     = 4,
    Bne     = 5,
    Blez    = 6,
    Bgtz    = 7,
    Addi    = 8,
    Addiu   = 9,
    Slti    = 10,
    Sltiu   = 11,
    Andi    = 12,
    Ori     = 13,
    Xori    = 14,
    Lui     = 15,
    Z0Rs    = 16,
    Z1Rs    = 17,
    Z2Rs    = 18,
    Z4Rs    = 19,
    Beql    = 20,
    Bnel    = 21,
    Blezl   = 22,
    Bgtzl   = 23,
    Lb      = 32,
    Lh      = 33,
    Lwl     = 34,
    Lw      = 35,
    Lbu     = 36,
    Lhu     = 37,
    Lwr     = 38,
    Sb      = 40,
    Sh      = 41,
    Swl     = 42,
    Sw      = 43,
    Swr     = 46,
    Cache   = 47,
    Ll      = 48,
    Lwc1    = 49,
    Lwc2    = 50,
    Pref    = 51,
    Lcd1    = 53,
    Ldc2    = 54,
    Sc      = 56,
    Swc1    = 57,
    Swc2    = 58,
    Scd1    = 61,
    Scd2    = 62,
}

#[rustfmt::skip]
#[derive(Debug)]
pub enum RsDecode {
    Mfcz    = 0,
    Cfcz    = 2,
    Mtcz    = 4,
    Ctcz    = 6,
    Bcz     = 8,
    Copz16  = 16,
    Copz17  = 17,
}

#[rustfmt::skip]
#[derive(Debug)]
pub enum RtDecode {
    Bltz    = 0,
    Bgez    = 1,
    Bltzl   = 2,
    Bgezl   = 3,
    Tgei    = 8,
    Tgeiu   = 9,
    Tlti    = 10,
    Tltiu   = 11,
    Tegi    = 12,
    Tnei    = 14,
    Bltzal  = 16,
    Bgezal  = 17,
    Bltzall = 18,
    Bgczall = 19,
}

#[rustfmt::skip]
#[derive(Debug)]
pub enum Funct {
    Sll,
    Srl,
    Sra,
    Sllv,
    Srlv,
    Srav,
    Jr,
    Jalr,
    Movz,
    Movn,
    Syscall,
    Break,
    Sync,
    Mfhi,
    Mthi,
    Mflo,
    Mtlo,
    Mult,
    Multu,
    Div,
    Divu,
    Add,
    Addu,
    Sub,
    Subu,
    And,
    Or,
    Xor,
    Nor,
    Slt,
    Sltu,
    Tge,
    Tgeu,
    Tlt,
    Tltu,
    Teq,
    Tne,
}
